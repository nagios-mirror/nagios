################################################################################
# Sample COMMANDS.CFG file for Nagios
#
# Last Modified: 01-15-2002
#
# A primary objective of this file is reverse compatibility across
# many generations of plugin releases. In addition to this file, there
# is a command.cfg file that is distributed with the plugins
# themselves.  The file distributed with the plugins is designed to
# reflect forward porgress on the plugins, and makes no effort to be
# comptible with plugin versions other than the one it is created
# for. It is generally easiest to use the file you are looking at now,
# but you will generally see examples of the newest plugin features by
# using the command.cfg file distributed with the same plugin set you
# are currently using.
#
################################################################################


################################################################################
# COMMAND CONFIGURATION
#
# SYNTAX:
# command[<command_name>]=<command_line>
#
# <command_name> = A short name used to identify the command
# <command_line> = The actual command line.  The command line doesn't have to be
#                  surrounded in quotes, but may contain quotes as needed within
#                  the command line.  Take care to use single quotes at the
#                  outer edges of commands or you will have command line
#                  expansion problems when the command is executed by the shell.
#                  Any valid shell command can be used.  Multiple commands can
#                  be separated with semicolons, piping is allowed.  The 
#                  command line can contain macros, but not are macros are valid
#                  at all time (notifications, service checks, etc).  See the
#                  HTML documentaion for more informationon on using macros in
#                  commands.
#                  
# Note: Service check, service notification, host check, host notification,
#       service event handler, and host event handler functions are all defined
#       here.
################################################################################


# These are some example service check commands.  They may or may not work on
# your system, as they must be modified to work with the version of the plugins
# you are using!

command[check_tcp]=$USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$
command[check_udp]=$USER1$/check_udp -H $HOSTADDRESS$ -p $ARG1$
command[check_ftp]=$USER1$/check_ftp -H $HOSTADDRESS$
command[check_pop]=$USER1$/check_pop -H $HOSTADDRESS$
command[check_smtp]=$USER1$/check_smtp -H $HOSTADDRESS$
command[check_nntp]=$USER1$/check_nntp -H $HOSTADDRESS$
command[check_http]=$USER1$/check_http -H $HOSTADDRESS$
command[check_telnet]=$USER1$/check_tcp -H $HOSTADDRESS$ -p 23
command[check_ping]=$USER1$/check_ping -H $HOSTADDRESS$ -w $ARG1$ -c $ARG2$ -p 5


# These are examples of commands for checking "local" services - i.e. things
# on this machine that cannot be checked from remote machines.  If you want
# to monitor disk space, users, processes, etc. on remote machines, look into
# using the check_snmp or check_by_ssh plugins or by using an addon like NRPE.

command[check_local_disk]=$USER1$/check_disk -w $ARG1$ -c $ARG2$ -p $ARG3$
command[check_local_users]=$USER1$/check_users -w $ARG1$ -c $ARG2$
command[check_local_procs]=$USER1$/check_procs -w $ARG1$ -c $ARG2$
command[check_local_load]=$USER1$/check_load -w $ARG1$ -c $ARG2$


# This command checks to see if a host is "alive" by pinging it
# Note: The warning and critical thresholds are pretty high for real use,
#       but this works as an example

command[check-host-alive]=$USER1$/check_ping -H $HOSTADDRESS$ -w 2000.0,60% -c 5000.0,100% -p 5

