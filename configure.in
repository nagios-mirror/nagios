dnl Process this -*-m4-*- file with autoconf to produce a configure script.

dnl Disable caching
define([AC_CACHE_LOAD],)
define([AC_CACHE_SAVE],)

AC_INIT(base/nagios.c)
AC_CONFIG_HEADER(common/config.h common/snprintf.h base/nagios.h cgi/cgiutils.h)
AC_PREFIX_DEFAULT(/usr/local/nagios)

PKG_NAME=nagios
PKG_VERSION="2.0-very-pre-alpha"
PKG_HOME_URL="http://www.nagios.org/"
PKG_REL_DATE="12-01-2002"

dnl Figure out how to invoke "install" and what install options to use.
AC_PROG_INSTALL
AC_SUBST(INSTALL)


dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PATH_PROG([STRIP],[strip],[true])

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(ctype.h dirent.h errno.h fcntl.h getopt.h grp.h limits.h math.h pthread.h pthreads.h pwd.h regex.h signal.h strings.h string.h syslog.h unistd.h uio.h sys/types.h sys/time.h sys/resource.h sys/wait.h sys/stat.h sys/timeb.h sys/ipc.h sys/msg.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_STRUCT_TM
AC_STRUCT_TIMEZONE
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_TYPE_GETGROUPS

dnl Checks for library functions.
AC_CHECK_FUNCS(strdup strstr strtoul initgroups)

AC_MSG_CHECKING(for type of socket size)
AC_TRY_COMPILE([#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
],
[int a = send(1, (const void *) 0, (size_t) 0, (int) 0);],
[AC_DEFINE(SOCKET_SIZE_TYPE, size_t) AC_MSG_RESULT(size_t)],
[AC_DEFINE(SOCKET_SIZE_TYPE, int) AC_MSG_RESULT(int)])


dnl Test for pthreads support - taken from ICU FreeBSD Port configure script
THREADLIBS=""
have_pthreads="no"

dnl FreeBSD -pthread check - Jonathan McDowell <noodles@earth.li>
AC_DEFUN(AC_PTHREAD_FREEBSD,[
	AC_MSG_CHECKING([if we need -pthread for threads])
	AC_CACHE_VAL(ac_ldflag_pthread,[
		ac_save_LDFLAGS="$LDFLAGS"
		LDFLAGS="-pthread $LDFLAGS"
		AC_TRY_LINK([
			char pthread_create();
			],
			pthread_create();,
			eval "ac_ldflag_pthread=yes",
			eval "ac_ldflag_pthread=no"
			),
		THREADLIBS="$ac_save_LDFLAGS"
		])
	if eval "test \"`echo $ac_ldflag_pthread`\" = yes"; then
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(no)
	fi
	])

dnl Test for HPUX cma threads first..
AC_CHECK_LIB(cma,pthread_create,
	THREADLIBS="$THREADLIBS -lpthread"
	])
if test $ac_cv_lib_cma_pthread_create = yes; then
	have_pthreads="yes"
fi

dnl special pthread handling 
dnl AIX uses pthreads instead of pthread, and HP/UX uses cma
dnl FreeBSD users -pthread
AC_CHECK_LIB(pthread,pthread_create,[
	THREADLIBS="$THREADLIBS -lpthread"
	])
if test $ac_cv_lib_pthread_pthread_create = yes; then
	have_pthreads="yes"
else
	dnl For HP 11
	AC_CHECK_LIB(pthread,pthread_mutex_init,[
		THREADLIBS="$THREADLIBS -lpthread"
		])
	if test $ac_cv_lib_pthread_pthread_mutex_init = yes; then
		have_pthreads="yes"
	fi
fi

dnl AIX uses pthreads instead of pthread
if test $have_pthreads = "no"; then
	AC_CHECK_LIB(pthreads,pthread_create,[
		THREADLIBS="$THREADLIBS -lpthreads"
		])
	if test $ac_cv_lib_pthreads_pthread_create = yes; then
		have_pthreads="yes"
	fi
fi

dnl all other thread tests fail, try BSD's -pthread
if test $have_pthreads = "no"; then
	AC_PTHREAD_FREEBSD
fi

AC_SUBST(THREADLIBS)




AC_ARG_WITH(nagios_user,--with-nagios-user=<user> sets user name to run nagios,nagios_user=$withval,nagios_user=nagios)
AC_ARG_WITH(nagios_grp,--with-nagios-grp=<grp> sets group name to run nagios,nagios_grp=$withval,nagios_grp=nagios)
AC_SUBST(nagios_user)
AC_SUBST(nagios_grp)
AC_DEFINE_UNQUOTED(DEFAULT_NAGIOS_USER,"$nagios_user")
AC_DEFINE_UNQUOTED(DEFAULT_NAGIOS_GROUP,"$nagios_grp")
INSTALL_OPTS="-o $nagios_user -g $nagios_grp"
AC_SUBST(INSTALL_OPTS)

dnl Check for location of mail program
MAIL_PROG=no
AC_ARG_WITH(mail,--with-mail=<path_to_mail> sets path to equivalent program to mail,MAIL_PROG=$withval,MAIL_PROG=no) 
if test MAIL_PROG=no; then
	AC_PATH_PROG(MAIL_PROG,mail) 
fi 
AC_SUBST(MAIL_PROG)

AC_ARG_WITH(command_user,--with-command-user=<user> sets user name for command access,command_user=$withval,command_user=$nagios_user)
AC_ARG_WITH(command_grp,--with-command-grp=<grp> sets group name for command access,command_grp=$withval,command_grp=$nagios_grp)
AC_SUBST(command_user)
AC_SUBST(command_grp)
COMMAND_OPTS="-o $command_user -g $command_grp"
AC_SUBST(COMMAND_OPTS)

dnl Check for location of init scripts
init_dir=/etc/rc.d/init.d
if test -d /etc/rc.d/init.d; then
	init_dir="/etc/rc.d/init.d"
elif test -d /usr/local/etc/rc.d; then
	init_dir="/usr/local/etc/rc.d"
elif test -d /etc/rc.d; then
	init_dir="/etc/rc.d"
elif test -d /etc/init.d; then
	init_dir="/etc/init.d"
elif test -d /sbin/init.d; then
	init_dir="/sbin/init.d"
fi

dnl User can override init script location
AC_ARG_WITH(init_dir,--with-init-dir=<path> sets directory to place init script into,init_dir=$withval)
AC_SUBST(init_dir)

echo "Init script directory: " $init_dir

AC_ARG_WITH(lockfile,--with-lockfile=<path> sets path and file name for lock file,lockfile=$withval,lockfile=$localstatedir/nagios.lock)
AC_SUBST(lockfile)



dnl Default xdata routines...
XSDTYPE=default
XCDTYPE=default
XRDTYPE=default
XODTYPE=template
XPDTYPE=default
XDDTYPE=default

XSDCOMMENT=
XCDCOMMENT=
XRDCOMMENT=
XODCOMMENT=
XPDCOMMENT=
XDDCOMMENT=

USE_MYSQL=no
USE_PGSQL=no

dnl Should we use all MySQL xdata routines?
AC_ARG_WITH(mysql-xdata,--with-mysql-xdata enables use of MySQL database for comment/downtime/status data,[
	XDATATYPE=mysql
	XSDTYPE=mysql
	XCDTYPE=mysql
	XDDTYPE=mysql
	])

dnl Should we use all PostgreSQL xdata routines?
AC_ARG_WITH(pgsql-xdata,--with-pgsql-xdata enables use of PostgreSQL database for comment/downtime/status data,[
	XDATATYPE=pgsql
	XSDTYPE=pgsql
	XCDTYPE=pgsql
	XDDTYPE=pgsql
	])

dnl What status I/O implementation should we use?
AC_ARG_WITH(mysql-status,--with-mysql-status enables use of MySQL database for storage of status data,XSDTYPE=mysql)
AC_ARG_WITH(pgsql-status,--with-pgsql-status enables use of PostgreSQL database for storage of status data,XSDTYPE=pgsql)
AC_ARG_WITH(default-status,--with-default-status enables use of default status data routines,XSDTYPE=default)
if test $XSDTYPE = mysql; then
	AC_DEFINE_UNQUOTED(USE_XSDDB)
	AC_DEFINE_UNQUOTED(USE_XSDMYSQL)
	USE_MYSQL=yes
	XSDC="xsddb.c"
	XSDH="xsddb.h"
	XSDCOMMENT="Database (MySQL)"
	echo "We'll use MySQL database routines (in xdata/xsddb.*) for status data I/O..."
elif test $XSDTYPE = pgsql; then
	AC_DEFINE_UNQUOTED(USE_XSDDB)
	AC_DEFINE_UNQUOTED(USE_XSDPGSQL)
	USE_PGSQL=yes
	XSDC="xsddb.c"
	XSDH="xsddb.h"
	XSDCOMMENT="Database (PostgreSQL)"
	echo "We'll use PostgreSQL database routines (in xdata/xsddb.*) for status data I/O..."
else
	AC_DEFINE_UNQUOTED(USE_XSDDEFAULT)
	XSDC="xsddefault.c"
	XSDH="xsddefault.h"
	XSDCOMMENT="Default (text file)"
	echo "We'll use default routines (in xdata/xsddefault.*) for status data I/O..."
fi
AC_SUBST(XSDC)
AC_SUBST(XSDH)


dnl What comment I/O implementation should we use?
AC_ARG_WITH(mysql-comments,--with-mysql-comments enables use of MySQL database for storage of comment data,XCDTYPE=mysql)
AC_ARG_WITH(pgsql-comments,--with-pgsql-comments enables use of PostgreSQL database for storage of comment data,XCDTYPE=pgsql)
AC_ARG_WITH(default-comments,--with-default-comments enables use of default comment data routines,XCDTYPE=default)
if test $XCDTYPE = mysql; then
	AC_DEFINE_UNQUOTED(USE_XCDDB)
	AC_DEFINE_UNQUOTED(USE_XCDMYSQL)
	USE_MYSQL=yes
	XCDC="xcddb.c"
	XCDH="xcddb.h"
	echo "We'll use MySQL database routines (in xdata/xcddb.*) for comment data I/O..."
	XCDCOMMENT="Database (MySQL)"
elif test $XCDTYPE = pgsql; then
	AC_DEFINE_UNQUOTED(USE_XCDDB)
	AC_DEFINE_UNQUOTED(USE_XCDPGSQL)
	USE_PGSQL=yes
	XCDC="xcddb.c"
	XCDH="xcddb.h"
	echo "We'll use PostgreSQL database routines (in xdata/xcddb.*) for comment data I/O..."
	XCDCOMMENT="Database (PostgreSQL)"
else
	AC_DEFINE_UNQUOTED(USE_XCDDEFAULT)
	XCDC="xcddefault.c"
	XCDH="xcddefault.h"
	XCDCOMMENT="Default (text file)"
	echo "We'll use default routines (in xdata/xcddefault.*) for comment data I/O..."
fi
AC_SUBST(XCDC)
AC_SUBST(XCDH)


dnl What retention data I/O implementation should we use?
dnl AC_ARG_WITH(mysql-retention,--with-mysql-retention enables use of MySQL database for storage of retention data,XRDTYPE=mysql)
dnl AC_ARG_WITH(pgsql-retention,--with-pgsql-retention enables use of PostgresSQL database for storage of retention data,XRDTYPE=pgsql)
dnl AC_ARG_WITH(default-retention,--with-default-retention enables use of default retention data routines,XRDTYPE=default)
if test $XRDTYPE = default; then
	AC_DEFINE_UNQUOTED(USE_XRDDEFAULT)
	XRDC="xrddefault.c"
	XRDH="xrddefault.h"
	XRDCOMMENT="Default (text file)"
	echo "We'll use default routines (in xdata/xrddefault.*) for retention data I/O..."
fi
AC_SUBST(XRDC)
AC_SUBST(XRDH)


dnl What object data I/O implementation should we use?
dnl AC_ARG_WITH(default-objects,--with-default-objects enables use of default object data routines,XODTYPE=default)
dnl AC_ARG_WITH(template-objects,--with-template-objects enables use of template-based object data routines,XODTYPE=template)
if test $XODTYPE = template; then
	AC_DEFINE_UNQUOTED(USE_XODTEMPLATE)
	XODC="xodtemplate.c"
	XODH="xodtemplate.h"
	XODCOMMENT="Template-based (text file)"
	echo "We'll use template-based routines (in xdata/xodtemplate.*) for object data I/O..."
fi
AC_SUBST(XODC)
AC_SUBST(XODH)



dnl What performance data I/O implementation should we use?
AC_ARG_WITH(default-perfdata,--with-default-perfdata enables use of default performance data routines,XPDTYPE=default)
AC_ARG_WITH(file-perfdata,--with-file-perfdata enables use of file-based performance data routines,XPDTYPE=file)
if test $XPDTYPE = file; then
	AC_DEFINE_UNQUOTED(USE_XPDFILE)
	XPDC="xpdfile.c"
	XPDH="xpdfile.h"
	XPDCOMMENT="File"
	echo "We'll use file-based routines (in xdata/xpdfile.*) for performance data I/O..."
else
	AC_DEFINE_UNQUOTED(USE_XPDDEFAULT)
	XPDC="xpddefault.c"
	XPDH="xpddefault.h"
	XPDCOMMENT="Default (external commands)"
	echo "We'll use default routines (in xdata/xpddefault.*) for performance data I/O..."
fi
AC_SUBST(XPDC)
AC_SUBST(XPDH)



dnl What downtime I/O implementation should we use?
AC_ARG_WITH(mysql-downtime,--with-mysql-downtime enables use of MySQL database for storage of scheduled downtime data,XDDTYPE=mysql)
AC_ARG_WITH(pgsql-downtime,--with-pgsql-downtime enables use of PostgreSQL database for storage of scheduled downtime data,XDDTYPE=pgsql)
AC_ARG_WITH(default-downtime,--with-default-downtime enables use of default scheduled downtime data routines,XDDTYPE=default)
if test $XDDTYPE = mysql; then
	AC_DEFINE_UNQUOTED(USE_XDDDB)
	AC_DEFINE_UNQUOTED(USE_XDDMYSQL)
	USE_MYSQL=yes
	XDDC="xdddb.c"
	XDDH="xdddb.h"
	XDDCOMMENT="Database (MySQL)"
	echo "We'll use MySQL database routines (in xdata/xdddb.*) for scheduled downtime data I/O..."
elif test $XDDTYPE = pgsql; then
	AC_DEFINE_UNQUOTED(USE_XDDDB)
	AC_DEFINE_UNQUOTED(USE_XDDPGSQL)
	USE_PGSQL=yes
	XDDC="xdddb.c"
	XDDH="xdddb.h"
	XDDCOMMENT="Database (PostgreSQL)"
	echo "We'll use PostgreSQL database routines (in xdata/xdddb.*) for scheduled downtime data I/O..."
else
	AC_DEFINE_UNQUOTED(USE_XDDDEFAULT)
	XDDC="xdddefault.c"
	XDDH="xdddefault.h"
	XDDCOMMENT="Default (text file)"
	echo "We'll use default routines (in xdata/xdddefault.*) for scheduled downtime data I/O..."
fi
AC_SUBST(XDDC)
AC_SUBST(XDDH)


dnl Optional MySQL library and include paths
AC_ARG_WITH(mysql-lib,--with-mysql-lib=DIR sets location of the MySQL client library,[
	LDFLAGS="${LDFLAGS} -L${withval}"
	LD_RUN_PATH="${withval}${LD_RUN_PATH:+:}${LD_RUN_PATH}"
	])
AC_ARG_WITH(mysql-inc,--with-mysql-inc=DIR sets location of the MySQL client include files,[
	CFLAGS="${CFLAGS} -I${withval}"
	])


dnl Optional PostgreSQL library and include paths
AC_ARG_WITH(pgsql-lib,--with-pgsql-lib=DIR sets location of the PostgreSQL client library,[
	LDFLAGS="${LDFLAGS} -L${withval}"
	LD_RUN_PATH="${withval}${LD_RUN_PATH:+:}${LD_RUN_PATH}"
	])
AC_ARG_WITH(pgsql-inc,--with-pgsql-inc=DIR sets location of the PostgreSQL client include files,[
	CFLAGS="${CFLAGS} -I${withval}"
	])


dnl Are we using any MySQL routines?
if test $USE_MYSQL = yes; then

	AC_CHECK_LIB(mysqlclient,main,,MYSQLFOUND=nope)

	dnl Did we find the MySQL libraries?
	if test x$MYSQLFOUND = xnope; then
		echo ""
		echo ""
		echo "*** MySQL library could not be located... **************************"
		echo ""
		echo "You chose to compile Nagios with MySQL support, but I was unable to"
		echo "locate the MySQL library on your system.  If the library is"
		echo "installed,  use the --with-mysql-lib and --with-mysql-inc arguments"
		echo "to specify the locations of the MySQL library and include files."
		echo ""
		echo "NOTE: After you install the necessary libraries on your system:"
		echo "      1. Make sure /etc/ld.so.conf has an entry for the directory in"
		echo "         which the MySQL libraries are installed."
		echo "      2. Run 'ldconfig' to update the run-time linker options."
		echo "      3. Run 'make clean' in the Nagios distribution to clean out"
		echo "         any old references to your previous compile."
		echo "      4. Rerun the configure script."
		echo ""
		echo "********************************************************************"
		echo ""
		echo ""

	dnl We found the MySQL lib!
	else
		echo "MySQL library was found!"

	fi
fi	

dnl Are we using any PostgreSQL routines?
if test $USE_PGSQL = yes; then

	AC_CHECK_LIB(pq,main,,PGSQLFOUND=nope)

	dnl Did we find the PostgreSQL libraries?
	if test x$PGSQLFOUND = xnope; then
		echo ""
		echo ""
		echo "*** PostgreSQL library could not be located... *********************"
		echo ""
		echo "You chose to compile Nagios with PostgreSQL support, but I was"
		echo "unable to locate the PostgreSQL library on your system.  If the"
		echo "library is installed,  use the --with-pgsql-lib and --with-pgsql-inc"
		echo "arguments to specify the locations of the PostgreSQL library and"
		echo "include files."
		echo ""
		echo "NOTE: After you install the necessary libraries on your system:"
		echo "      1. Make sure /etc/ld.so.conf has an entry for the directory in"
		echo "         which the PostgreSQL libraries are installed."
		echo "      2. Run 'ldconfig' to update the run-time linker options."
		echo "      3. Run 'make clean' in the Nagios distribution to clean out"
		echo "         any old references to your previous compile."
		echo "      4. Rerun the configure script."
		echo ""
		echo "********************************************************************"
		echo ""
		echo ""

	dnl We found the PostgreSQL lib!
	else
		echo "PostgreSQL library was found!"

	fi
fi	



dnl Option GD library and include paths
AC_ARG_WITH(gd-lib,--with-gd-lib=DIR sets location of the gd library,[
	LDFLAGS="${LDFLAGS} -L${withval}"
	LD_RUN_PATH="${withval}${LD_RUN_PATH:+:}${LD_RUN_PATH}"
	])
AC_ARG_WITH(gd-inc,--with-gd-inc=DIR sets location of the gd include files,[
	CFLAGS="${CFLAGS} -I${withval}"
	])


TRYGD=yep

dnl statusmap CGI enabled by default, unless users chooses not to use it
TRYSTATUSMAP=yep
AC_ARG_ENABLE(statusmap,--disable-statusmap=disables compilation of statusmap CGI,TRYSTATUSMAP=nope)


dnl statuswrl CGI enabled by default, unless users chooses not to use it
TRYSTATUSWRL=yep
AC_ARG_ENABLE(statuswrl,--disable-statuswrl=disables compilation of statuswrl (VRML) CGI,TRYSTATUSWRL=nope)

if test x$TRYSTATUSWRL = xyep; then
	AC_DEFINE_UNQUOTED(USE_STATUSWRL)
	CGIEXTRAS="$CGIEXTRAS statuswrl.cgi"
fi


dnl JMD_CHECK_LIB_ORDER(LIBRARY, FUNCTION, ORDER [, ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND
dnl              [, OTHER-LIBRARIES]]])
	AC_DEFUN(JMD_CHECK_LIB_ORDER,
	[AC_MSG_CHECKING([for $2 in -l$1 (order $3)])
	dnl Use a cache variable name containing both the library and function name,
	dnl because the test really is for library $1 defining function $2, not
	dnl just for library $1.  Separate tests with the same $1 and different $2s
	dnl may have different results.
	ac_lib_var=`echo $1['_']$2['_']$3 | sed 'y%./+-%__p_%'`
	AC_CACHE_VAL(ac_cv_lib_$ac_lib_var,
	[ac_save_LIBS="$LIBS"
	LIBS="-l$1 $6 $LIBS"
	AC_TRY_LINK(dnl
	ifelse([AC_LANG], [FORTRAN77], ,
	ifelse([$2], [main], , dnl Avoid conflicting decl of main.
[/* Override any gcc2 internal prototype to avoid an error.  */
]ifelse([AC_LANG], CPLUSPLUS, [#ifdef __cplusplus
extern "C"
#endif
])dnl
[/* We use char because int might match the return type of a gcc2
    builtin and then its argument prototype would still apply.  */
char $2();
])),
	            [$2()],
	            eval "ac_cv_lib_$ac_lib_var=yes",
	            eval "ac_cv_lib_$ac_lib_var=no")
	LIBS="$ac_save_LIBS"
	])dnl
	if eval "test \"`echo '$ac_cv_lib_'$ac_lib_var`\" = yes"; then
	  AC_MSG_RESULT(yes)
	  ifelse([$4], ,
	[changequote(, )dnl
	  ac_tr_lib=HAVE_LIB`echo $1 | sed -e 's/[^a-zA-Z0-9_]/_/g' \
	    -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`
	changequote([, ])dnl
	  AC_DEFINE_UNQUOTED($ac_tr_lib)
	  LIBS="-l$1 $LIBS"
	], [$4])
	else
	  AC_MSG_RESULT(no)
	ifelse([$5], , , [$5
	])dnl
	fi
	])



dnl Should we try and detect the GD libs?
if test x$TRYGD = xyep; then

	dnl See if the GD lib is available and supports PNG images...

	dnl GD > 1.8.1 requires the jpeg library to be present as well, so test for that first...
	JMD_CHECK_LIB_ORDER(gd,gdImagePng,1,[
			GDLIBFOUND=yep
			GDLIBS="-lgd -lz -lm -lpng -ljpeg"
	        	],:,[-lz -lm -lpng -ljpeg])

	dnl If we failed the first test, try without jpeg library
	if test x$GDLIBFOUND = x; then
		JMD_CHECK_LIB_ORDER(gd,gdImagePng,2,[
			GDLIBFOUND=yep
			GDLIBS="-lgd -lz -lm -lpng"
		        ],:,[-lz -lm -lpng])
	fi

	dnl We failed again, so try a different library ordering (without jpeg libs)
	if test x$GDLIBFOUND = x; then
		JMD_CHECK_LIB_ORDER(gd,gdImagePng,3,[
			GDLIBFOUND=yep
			GDLIBS="-lgd -lpng -lz -lm"
	        	],:,[-lpng -lz -lm])
	fi

	dnl Did we find the necessary GD libraries?
	if test x$GDLIBFOUND = x; then
		echo ""
		echo ""
		echo "*** GD, PNG, and/or JPEG libraries could not be located... *********"
		echo ""
		echo "Boutell's GD library is required to compile the statusmap, trends"
		echo "and histogram CGIs.  Get it from http://www.boutell.com/gd/, compile"
		echo "it, and use the --with-gd-lib and --with-gd-inc arguments to specify"
		echo "the locations of the GD library and include files."
		echo ""
		echo "NOTE: In addition to the gd-devel library, you'll also need to make"
		echo "      sure you have the png-devel and jpeg-devel libraries installed"
		echo "      on your system."
		echo ""
		echo "NOTE: After you install the necessary libraries on your system:"
		echo "      1. Make sure /etc/ld.so.conf has an entry for the directory in"
		echo "         which the GD, PNG, and JPEG libraries are installed."
		echo "      2. Run 'ldconfig' to update the run-time linker options."
		echo "      3. Run 'make clean' in the Nagios distribution to clean out"
		echo "         any old references to your previous compile."
		echo "      4. Rerun the configure script."
		echo ""
		echo "NOTE: If you can't get the configure script to recognize the GD libs"
		echo "      on your system, get over it and move on to other things.  The"
		echo "      CGIs that use the GD libs are just a small part of the entire"
		echo "      Nagios package.  Get everything else working first and then"
		echo "      revisit the problem.  Make sure to check the nagios-users"
		echo "      mailing list archives for possible solutions to GD library"
		echo "      problems when you resume your troubleshooting."
		echo ""
		echo "********************************************************************"
		echo ""
		echo ""

	dnl We found the GD lib!
	else
		echo "GD library was found!"
		if test x$TRYSTATUSMAP = xyep; then
			AC_DEFINE_UNQUOTED(USE_STATUSMAP)
			CGIEXTRAS="$CGIEXTRAS statusmap.cgi"
		fi

		dnl compile trends CGI
		AC_DEFINE_UNQUOTED(USE_TRENDS)
		CGIEXTRAS="$CGIEXTRAS trends.cgi"
	
		dnl compile histogram CGI
		AC_DEFINE_UNQUOTED(USE_HISTOGRAM)
	        CGIEXTRAS="$CGIEXTRAS histogram.cgi"
	fi
fi


AC_ARG_WITH(cgiurl,--with-cgiurl=<dir> sets URL for cgi programs (do not use a trailing slash),cgiurl=$withval,cgiurl=/nagios/cgi-bin)
AC_ARG_WITH(htmurl,--with-htmurl=<dir> sets URL for public html,htmurl=$withval,htmurl=/nagios)
AC_SUBST(htmurl)
AC_SUBST(cgiurl)

AC_ARG_ENABLE(DEBUG0,--enable-DEBUG0 shows function entry and exit,AC_DEFINE_UNQUOTED(DEBUG0))
AC_ARG_ENABLE(DEBUG1,--enable-DEBUG1 shows general info messages,AC_DEFINE_UNQUOTED(DEBUG1))
AC_ARG_ENABLE(DEBUG2,--enable-DEBUG2 shows warning messages,AC_DEFINE_UNQUOTED(DEBUG2))
AC_ARG_ENABLE(DEBUG3,--enable-DEBUG3 shows scheduled events (service and host checks... etc),AC_DEFINE_UNQUOTED(DEBUG3))
AC_ARG_ENABLE(DEBUG4,--enable-DEBUG4 shows service and host notifications,AC_DEFINE_UNQUOTED(DEBUG4))
AC_ARG_ENABLE(DEBUG5,--enable-DEBUG5 shows SQL queries,AC_DEFINE_UNQUOTED(DEBUG5))

AC_ARG_ENABLE(event-broker,--enable-event-broker enables integration with Nagios Event Broker,AC_DEFINE_UNQUOTED(USE_EVENT_BROKER))
AC_ARG_ENABLE(regexp-matching,--enable-regexp-matching enables regular expression matching in config files,AC_DEFINE_UNQUOTED(USE_REGEXP_MATCHING))

USEPERL=no;
INSTALLPERLSTUFF=no;
AC_ARG_ENABLE(embedded-perl,--enable-embedded-perl will enable embedded Perl interpreter,[
	AC_DEFINE_UNQUOTED(EMBEDDEDPERL)
	PERLLIBS="`perl -MExtUtils::Embed -e ldopts`" 
	PERLDIR="`perl -MConfig -e 'print $Config{installsitearch}'`" 
	CFLAGS="${CFLAGS} `perl -MExtUtils::Embed -e ccopts`" 
	USEPERL=yes
	INSTALLPERLSTUFF=yes;
	])

PERLCACHE=no;
AC_ARG_WITH(perlcache,--with-perlcache turns on cacheing of internally compiled Perl scripts,[
	AC_DEFINE(DO_CLEAN,"0")
	PERLCACHE=yes;
	]
	,[
	AC_DEFINE(DO_CLEAN,"1")
	PERLCACHE=no;
	])

dnl Is embedded Perl being compiled in?
if test x$USEPERL = xyes; then
	echo "Embedded Perl interpreter will be compiled in..."
	if test x$PERLCACHE = xyes; then
		echo "Internally compiled Perl scripts will be cached..."
	else
		echo "Internally compiled Perl scripts will NOT be cached..."
	fi
fi

dnl Test if we're using threaded Perl (patch by Chip Ach)
if test x$USEPERL = xyes; then
	if (perl -e 'use Config;exit -1 unless ($Config{'usethreads'});'); then
		echo "Using threaded perl"
		AC_DEFINE_UNQUOTED(THREADEDPERL)
	fi
fi


dnl Option for compiling under CYGWIN
nagios_name=nagios
AC_ARG_ENABLE(cygwin,--enable-cygwin enables building under the CYGWIN environment,[
	CFLAGS="${CFLAGS} -DCYGWIN" 
	nagios_name=nagios.exe;
	])
AC_SUBST(nagios_name)


dnl Should predictive failure routines be compiled in?
dnl AC_ARG_ENABLE(failure-prediction,--enable-failure-prediction will enable integration with failure prediction module (NOT HERE YET!),[
dnl	AC_DEFINE_UNQUOTED(PREDICT_FAILURES)
dnl	BASEEXTRALIBS="$BASEEXTRALIBS \$(FDATALIBS)"
dnl	echo "Failure prediction routines (incomplete!) will be compiled in..."
dnl	])

dnl Find traceroute
AC_PATH_PROG(PATH_TO_TRACEROUTE,traceroute)
AC_DEFINE_UNQUOTED(TRACEROUTE_COMMAND,"$PATH_TO_TRACEROUTE")



dnl Package directory for Solaris pkgmk (and other OSs, eventually)
VERSION=`grep 1.0 common/common.h | cut -d ' ' -f 3 | sed 's/"//g'`
PACKDIR=`pwd`/pkg
AC_SUBST(PACKDIR)
AC_SUBST(VERSION)
 
AC_CHECK_FUNC(snprintf,AC_DEFINE(HAVE_SNPRINTF),SNPRINTF_O=../common/snprintf.o)
AC_SUBST(SNPRINTF_O)

AC_MSG_CHECKING(for type va_list)
AC_TRY_COMPILE([#ifdef __STDC__
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#else
#include <sys/types.h>
#include <stdio.h>
#include <varargs.h>
#endif],
[va_list args;],
[AC_MSG_RESULT(yes)],
[AC_DEFINE(NEED_VA_LIST) AC_MSG_RESULT(no)])

AC_SUBST(CGIEXTRAS)
AC_SUBST(GDLIBS)
AC_SUBST(PERLLIBS)
AC_SUBST(PERLDIR)
AC_SUBST(BASEEXTRALIBS)
AC_SUBST(INITDIR)
AC_SUBST(INSTALLPERLSTUFF)

AC_PATH_PROG(PERL,perl)
AC_OUTPUT(Makefile subst pkginfo base/Makefile common/Makefile contrib/Makefile cgi/Makefile html/Makefile xdata/Makefile daemon-init html/index.html html/side.html)


perl subst common/locations.h
perl subst base/nagios.h

echo ""
echo "Creating sample config files in sample-config/ ..."

perl subst sample-config/nagios.cfg
perl subst sample-config/cgi.cfg
perl subst sample-config/resource.cfg

perl subst sample-config/template-object/hosts.cfg
perl subst sample-config/template-object/hostgroups.cfg
perl subst sample-config/template-object/services.cfg
perl subst sample-config/template-object/contacts.cfg
perl subst sample-config/template-object/contactgroups.cfg
perl subst sample-config/template-object/timeperiods.cfg
perl subst sample-config/template-object/escalations.cfg
perl subst sample-config/template-object/dependencies.cfg
perl subst sample-config/template-object/checkcommands.cfg
perl subst sample-config/template-object/misccommands.cfg
perl subst sample-config/template-object/minimal.cfg



dnl Review options
echo ""
echo ""
AC_MSG_RESULT([*** Configuration summary for $PKG_NAME $PKG_VERSION $PKG_REL_DATE ***:])

echo ""
echo " General Options:"
echo " -------------------------"

AC_MSG_RESULT([        Nagios executable:  $nagios_name])
AC_MSG_RESULT([        Nagios user/group:  $nagios_user,$nagios_grp])
AC_MSG_RESULT([       Command user/group:  $command_user,$command_grp])
if test x$USEPERL = xyes; then
if test x$PERLCACHE = xyes; then
AC_MSG_RESULT([            Embedded Perl:  yes, with caching])
else
AC_MSG_RESULT([            Embedded Perl:  yes, without caching])
fi
else
AC_MSG_RESULT([            Embedded Perl:  no])
fi
AC_MSG_RESULT([        Install \${prefix}:  $prefix])
AC_MSG_RESULT([                Lock file:  $lockfile])
AC_MSG_RESULT([           Init directory:  $init_dir])

echo ""
echo " Web Interface Options:"
echo " ------------------------"

AC_MSG_RESULT([                 HTML URL:  http://localhost$htmurl/])
AC_MSG_RESULT([                  CGI URL:  http://localhost$cgiurl/])
AC_MSG_RESULT([ Traceroute (used by WAP):  $PATH_TO_TRACEROUTE])

echo ""
echo " External Data Routines:"
echo " ------------------------"

AC_MSG_RESULT([              Status data:  $XSDCOMMENT])
AC_MSG_RESULT([             Comment data:  $XCDCOMMENT])
AC_MSG_RESULT([            Downtime data:  $XDDCOMMENT])
AC_MSG_RESULT([          Peformance data:  $XPDCOMMENT])


echo ""
echo ""
echo "Review the options above for accuracy.  If they look okay,"
echo "type 'make all' to compile the main program and CGIs."
echo ""

